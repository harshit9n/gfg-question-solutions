class Solution {
  public:
    long long solve(int N, int K, vector<long long> GeekNum) {
        // code here
        if (N <= K) {
            return GeekNum[N - 1];
        }

        // Calculate the sum of the initial K elements
        long long currentSum = 0;
        for (int i = 0; i < K; ++i) {
            currentSum += GeekNum[i];
        }

        // Start generating new terms from the (K+1)-th term to the N-th term
        for (int i = K; i < N; ++i) {
            // The next term is the current sum of the last K terms
            GeekNum.push_back(currentSum);
            // Update the current sum for the sliding window
            currentSum += GeekNum.back(); // Add the new term
            currentSum -= GeekNum[i - K]; // Subtract the term that is sliding out of the window
        }

        // The N-th term will be the last element added to the GeekNum array
        return GeekNum.back();
    }
};
